<?php
/**
 * TestApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Test\OpenAPI\V1_0_1\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Test\OpenAPI\V1_0_1\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InvalidArgumentException;
use OpenAPI\Client\Api\ApiInterface;
use OpenAPI\Client\ApiException;
use Test\OpenAPI\V1_0_1\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\InvalidResponse;
use OpenAPI\Client\ObjectSerializer;
use OpenAPI\Client\RequestTimedOut;
use OpenAPI\Client\ServiceUnavailable;
use Psr\Log\LoggerInterface;

/**
 * TestApi Class Doc Comment
 *
 * @category Class
 * @package  Test\OpenAPI\V1_0_1\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TestApi implements ApiInterface
{
    public const CONFIGURATION_CLASS = 'Test\OpenAPI\V1_0_1\Client\Configuration';

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var LoggerInterface|null
     */
    private $logger;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null $config
     * @param HeaderSelector|null $selector
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     * @param LoggerInterface|null $logger
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0,
        LoggerInterface $logger = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
        $this->logger = $logger;
    }

    public function setLogger(LoggerInterface $logger): void
    {
        $this->logger = $logger;
    }

    /**
     * {@inheritDoc}
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * {@inheritDoc}
     */
    public function getHosts(): array
    {
        return $this->config->getHostSettings();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation customOperationGet
     *
     * @param mixed $pathParam pathParam (required)
     * @param mixed $queryParam queryParam (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function customOperationGet($pathParam, $queryParam = null)
    {
        list($response) = $this->customOperationGetWithHttpInfo($pathParam, $queryParam);
        return $response;
    }

    /**
     * Operation customOperationGetWithHttpInfo
     *
     * @param mixed $pathParam (required)
     * @param mixed $queryParam (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function customOperationGetWithHttpInfo($pathParam, $queryParam = null)
    {
        $request = $this->customOperationGetRequest($pathParam, $queryParam);

        $this->log('info', 'Openapi send request.', [
            'requestBody' => (string)$request->getBody(),
            'requestUri' => (string)$request->getUri()
        ]);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);

                $this->log('info', 'Openapi response successfully received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);
            } catch (ConnectException $e) {
                if (str_contains($e->getMessage(), 'Operation timed out')) {
                    throw new RequestTimedOut(message: $e->getMessage());
                }
                throw $e;
            } catch (RequestException $e) {
                if (!$e->hasResponse()) {
                    throw $e;
                }
                $response = $e->getResponse();

                $this->log('info', 'Openapi not 2xx response received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);

                switch ($response->getStatusCode()) {
                    case 504:
                    case 524:
                        throw new RequestTimedOut(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                    case 503:
                        throw new ServiceUnavailable(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                }
            }

            $statusCode = $response->getStatusCode();

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    return [
                        $this->deserialize((string) $responseBody),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            return [
                $this->deserialize((string) $responseBody),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->deserialize((string) $e->getResponseBody());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customOperationGetAsync
     *
     * 
     *
     * @param mixed $pathParam (required)
     * @param mixed $queryParam (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customOperationGetAsync($pathParam, $queryParam = null)
    {
        return $this->customOperationGetAsyncWithHttpInfo($pathParam, $queryParam)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customOperationGetAsyncWithHttpInfo
     *
     * 
     *
     * @param mixed $pathParam (required)
     * @param mixed $queryParam (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customOperationGetAsyncWithHttpInfo($pathParam, $queryParam = null)
    {
        $request = $this->customOperationGetRequest($pathParam, $queryParam);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [
                        $this->deserialize((string) $response->getBody()),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customOperationGet'
     *
     * @param mixed $pathParam (required)
     * @param mixed $queryParam (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customOperationGetRequest($pathParam, $queryParam = null)
    {
        // verify the required parameter 'pathParam' is set
        if ($pathParam === null || (is_array($pathParam) && count($pathParam) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pathParam when calling customOperationGet'
            );
        }

        $resourcePath = '/test/{pathParam}/operation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($queryParam !== null) {
            if('form' === 'form' && is_array($queryParam)) {
                foreach($queryParam as $key => $value) {
                    $queryParams['queryParam'][$key] = $value;
                }
            }
            else {
                $queryParams['queryParam'] = $queryParam;
            }
        }


        // path params
        if ($pathParam !== null) {
            $resourcePath = str_replace(
                '{' . 'pathParam' . '}',
                ObjectSerializer::toPathValue($pathParam),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($_tempBody);
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customOperationPost
     *
     * @param mixed $pathParam pathParam (required)
     * @param mixed $test test (required)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function customOperationPost($pathParam, $test)
    {
        list($response) = $this->customOperationPostWithHttpInfo($pathParam, $test);
        return $response;
    }

    /**
     * Operation customOperationPostWithHttpInfo
     *
     * @param mixed $pathParam (required)
     * @param mixed $test (required)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function customOperationPostWithHttpInfo($pathParam, $test)
    {
        $request = $this->customOperationPostRequest($pathParam, $test);

        $this->log('info', 'Openapi send request.', [
            'requestBody' => (string)$request->getBody(),
            'requestUri' => (string)$request->getUri()
        ]);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);

                $this->log('info', 'Openapi response successfully received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);
            } catch (ConnectException $e) {
                if (str_contains($e->getMessage(), 'Operation timed out')) {
                    throw new RequestTimedOut(message: $e->getMessage());
                }
                throw $e;
            } catch (RequestException $e) {
                if (!$e->hasResponse()) {
                    throw $e;
                }
                $response = $e->getResponse();

                $this->log('info', 'Openapi not 2xx response received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);

                switch ($response->getStatusCode()) {
                    case 504:
                    case 524:
                        throw new RequestTimedOut(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                    case 503:
                        throw new ServiceUnavailable(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                }
            }

            $statusCode = $response->getStatusCode();

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    return [
                        $this->deserialize((string) $responseBody),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            return [
                $this->deserialize((string) $responseBody),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->deserialize((string) $e->getResponseBody());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customOperationPostAsync
     *
     * 
     *
     * @param mixed $pathParam (required)
     * @param mixed $test (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customOperationPostAsync($pathParam, $test)
    {
        return $this->customOperationPostAsyncWithHttpInfo($pathParam, $test)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customOperationPostAsyncWithHttpInfo
     *
     * 
     *
     * @param mixed $pathParam (required)
     * @param mixed $test (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customOperationPostAsyncWithHttpInfo($pathParam, $test)
    {
        $request = $this->customOperationPostRequest($pathParam, $test);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [
                        $this->deserialize((string) $response->getBody()),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customOperationPost'
     *
     * @param mixed $pathParam (required)
     * @param mixed $test (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customOperationPostRequest($pathParam, $test)
    {
        // verify the required parameter 'pathParam' is set
        if ($pathParam === null || (is_array($pathParam) && count($pathParam) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pathParam when calling customOperationPost'
            );
        }
        // verify the required parameter 'test' is set
        if ($test === null || (is_array($test) && count($test) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $test when calling customOperationPost'
            );
        }

        $resourcePath = '/test/{pathParam}/operation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pathParam !== null) {
            $resourcePath = str_replace(
                '{' . 'pathParam' . '}',
                ObjectSerializer::toPathValue($pathParam),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($test)) {
            $_tempBody = $test;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($_tempBody);
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testGet
     *
     * @param mixed $name name (optional)
     * @param mixed $id id (optional)
     * @param mixed $test test (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function testGet($name = null, $id = null, $test = null)
    {
        list($response) = $this->testGetWithHttpInfo($name, $id, $test);
        return $response;
    }

    /**
     * Operation testGetWithHttpInfo
     *
     * @param mixed $name (optional)
     * @param mixed $id (optional)
     * @param mixed $test (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function testGetWithHttpInfo($name = null, $id = null, $test = null)
    {
        $request = $this->testGetRequest($name, $id, $test);

        $this->log('info', 'Openapi send request.', [
            'requestBody' => (string)$request->getBody(),
            'requestUri' => (string)$request->getUri()
        ]);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);

                $this->log('info', 'Openapi response successfully received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);
            } catch (ConnectException $e) {
                if (str_contains($e->getMessage(), 'Operation timed out')) {
                    throw new RequestTimedOut(message: $e->getMessage());
                }
                throw $e;
            } catch (RequestException $e) {
                if (!$e->hasResponse()) {
                    throw $e;
                }
                $response = $e->getResponse();

                $this->log('info', 'Openapi not 2xx response received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);

                switch ($response->getStatusCode()) {
                    case 504:
                    case 524:
                        throw new RequestTimedOut(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                    case 503:
                        throw new ServiceUnavailable(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                }
            }

            $statusCode = $response->getStatusCode();

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    return [
                        $this->deserialize((string) $responseBody),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            return [
                $this->deserialize((string) $responseBody),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->deserialize((string) $e->getResponseBody());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testGetAsync
     *
     * 
     *
     * @param mixed $name (optional)
     * @param mixed $id (optional)
     * @param mixed $test (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testGetAsync($name = null, $id = null, $test = null)
    {
        return $this->testGetAsyncWithHttpInfo($name, $id, $test)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testGetAsyncWithHttpInfo
     *
     * 
     *
     * @param mixed $name (optional)
     * @param mixed $id (optional)
     * @param mixed $test (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testGetAsyncWithHttpInfo($name = null, $id = null, $test = null)
    {
        $request = $this->testGetRequest($name, $id, $test);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [
                        $this->deserialize((string) $response->getBody()),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testGet'
     *
     * @param mixed $name (optional)
     * @param mixed $id (optional)
     * @param mixed $test (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testGetRequest($name = null, $id = null, $test = null)
    {

        $resourcePath = '/Test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, 'form', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams['id'][$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }
        // query params
        if ($test !== null) {
            if('form' === 'form' && is_array($test)) {
                foreach($test as $key => $value) {
                    $queryParams['test'][$key] = $value;
                }
            }
            else {
                $queryParams['test'] = $test;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($_tempBody);
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testIdDelete
     *
     * @param mixed $id id (required)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function testIdDelete($id)
    {
        list($response) = $this->testIdDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation testIdDeleteWithHttpInfo
     *
     * @param mixed $id (required)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function testIdDeleteWithHttpInfo($id)
    {
        $request = $this->testIdDeleteRequest($id);

        $this->log('info', 'Openapi send request.', [
            'requestBody' => (string)$request->getBody(),
            'requestUri' => (string)$request->getUri()
        ]);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);

                $this->log('info', 'Openapi response successfully received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);
            } catch (ConnectException $e) {
                if (str_contains($e->getMessage(), 'Operation timed out')) {
                    throw new RequestTimedOut(message: $e->getMessage());
                }
                throw $e;
            } catch (RequestException $e) {
                if (!$e->hasResponse()) {
                    throw $e;
                }
                $response = $e->getResponse();

                $this->log('info', 'Openapi not 2xx response received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);

                switch ($response->getStatusCode()) {
                    case 504:
                    case 524:
                        throw new RequestTimedOut(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                    case 503:
                        throw new ServiceUnavailable(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                }
            }

            $statusCode = $response->getStatusCode();

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    return [
                        $this->deserialize((string) $responseBody),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            return [
                $this->deserialize((string) $responseBody),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->deserialize((string) $e->getResponseBody());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testIdDeleteAsync
     *
     * 
     *
     * @param mixed $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testIdDeleteAsync($id)
    {
        return $this->testIdDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param mixed $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testIdDeleteAsyncWithHttpInfo($id)
    {
        $request = $this->testIdDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [
                        $this->deserialize((string) $response->getBody()),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testIdDelete'
     *
     * @param mixed $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling testIdDelete'
            );
        }

        $resourcePath = '/Test/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($_tempBody);
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testIdGet
     *
     * @param mixed $id id (required)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function testIdGet($id)
    {
        list($response) = $this->testIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation testIdGetWithHttpInfo
     *
     * @param mixed $id (required)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function testIdGetWithHttpInfo($id)
    {
        $request = $this->testIdGetRequest($id);

        $this->log('info', 'Openapi send request.', [
            'requestBody' => (string)$request->getBody(),
            'requestUri' => (string)$request->getUri()
        ]);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);

                $this->log('info', 'Openapi response successfully received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);
            } catch (ConnectException $e) {
                if (str_contains($e->getMessage(), 'Operation timed out')) {
                    throw new RequestTimedOut(message: $e->getMessage());
                }
                throw $e;
            } catch (RequestException $e) {
                if (!$e->hasResponse()) {
                    throw $e;
                }
                $response = $e->getResponse();

                $this->log('info', 'Openapi not 2xx response received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);

                switch ($response->getStatusCode()) {
                    case 504:
                    case 524:
                        throw new RequestTimedOut(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                    case 503:
                        throw new ServiceUnavailable(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                }
            }

            $statusCode = $response->getStatusCode();

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    return [
                        $this->deserialize((string) $responseBody),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            return [
                $this->deserialize((string) $responseBody),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->deserialize((string) $e->getResponseBody());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testIdGetAsync
     *
     * 
     *
     * @param mixed $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testIdGetAsync($id)
    {
        return $this->testIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param mixed $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testIdGetAsyncWithHttpInfo($id)
    {
        $request = $this->testIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [
                        $this->deserialize((string) $response->getBody()),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testIdGet'
     *
     * @param mixed $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling testIdGet'
            );
        }

        $resourcePath = '/Test/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($_tempBody);
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testPathParamCustomGet
     *
     * @param mixed $pathParam pathParam (required)
     * @param mixed $queryParam queryParam (optional)
     * @param mixed $arrayParam arrayParam (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function testPathParamCustomGet($pathParam, $queryParam = null, $arrayParam = null)
    {
        list($response) = $this->testPathParamCustomGetWithHttpInfo($pathParam, $queryParam, $arrayParam);
        return $response;
    }

    /**
     * Operation testPathParamCustomGetWithHttpInfo
     *
     * @param mixed $pathParam (required)
     * @param mixed $queryParam (optional)
     * @param mixed $arrayParam (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function testPathParamCustomGetWithHttpInfo($pathParam, $queryParam = null, $arrayParam = null)
    {
        $request = $this->testPathParamCustomGetRequest($pathParam, $queryParam, $arrayParam);

        $this->log('info', 'Openapi send request.', [
            'requestBody' => (string)$request->getBody(),
            'requestUri' => (string)$request->getUri()
        ]);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);

                $this->log('info', 'Openapi response successfully received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);
            } catch (ConnectException $e) {
                if (str_contains($e->getMessage(), 'Operation timed out')) {
                    throw new RequestTimedOut(message: $e->getMessage());
                }
                throw $e;
            } catch (RequestException $e) {
                if (!$e->hasResponse()) {
                    throw $e;
                }
                $response = $e->getResponse();

                $this->log('info', 'Openapi not 2xx response received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);

                switch ($response->getStatusCode()) {
                    case 504:
                    case 524:
                        throw new RequestTimedOut(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                    case 503:
                        throw new ServiceUnavailable(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                }
            }

            $statusCode = $response->getStatusCode();

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    return [
                        $this->deserialize((string) $responseBody),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            return [
                $this->deserialize((string) $responseBody),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->deserialize((string) $e->getResponseBody());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testPathParamCustomGetAsync
     *
     * 
     *
     * @param mixed $pathParam (required)
     * @param mixed $queryParam (optional)
     * @param mixed $arrayParam (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testPathParamCustomGetAsync($pathParam, $queryParam = null, $arrayParam = null)
    {
        return $this->testPathParamCustomGetAsyncWithHttpInfo($pathParam, $queryParam, $arrayParam)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testPathParamCustomGetAsyncWithHttpInfo
     *
     * 
     *
     * @param mixed $pathParam (required)
     * @param mixed $queryParam (optional)
     * @param mixed $arrayParam (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testPathParamCustomGetAsyncWithHttpInfo($pathParam, $queryParam = null, $arrayParam = null)
    {
        $request = $this->testPathParamCustomGetRequest($pathParam, $queryParam, $arrayParam);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [
                        $this->deserialize((string) $response->getBody()),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testPathParamCustomGet'
     *
     * @param mixed $pathParam (required)
     * @param mixed $queryParam (optional)
     * @param mixed $arrayParam (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testPathParamCustomGetRequest($pathParam, $queryParam = null, $arrayParam = null)
    {
        // verify the required parameter 'pathParam' is set
        if ($pathParam === null || (is_array($pathParam) && count($pathParam) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pathParam when calling testPathParamCustomGet'
            );
        }

        $resourcePath = '/test/{pathParam}/custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($queryParam !== null) {
            if('form' === 'form' && is_array($queryParam)) {
                foreach($queryParam as $key => $value) {
                    $queryParams['queryParam'][$key] = $value;
                }
            }
            else {
                $queryParams['queryParam'] = $queryParam;
            }
        }
        // query params
        if (is_array($arrayParam)) {
            $arrayParam = ObjectSerializer::serializeCollection($arrayParam, 'form', true);
        }
        if ($arrayParam !== null) {
            $queryParams['arrayParam'] = $arrayParam;
        }


        // path params
        if ($pathParam !== null) {
            $resourcePath = str_replace(
                '{' . 'pathParam' . '}',
                ObjectSerializer::toPathValue($pathParam),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($_tempBody);
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testPathParamCustomPost
     *
     * @param mixed $pathParam pathParam (required)
     * @param mixed $test test (required)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function testPathParamCustomPost($pathParam, $test)
    {
        list($response) = $this->testPathParamCustomPostWithHttpInfo($pathParam, $test);
        return $response;
    }

    /**
     * Operation testPathParamCustomPostWithHttpInfo
     *
     * @param mixed $pathParam (required)
     * @param mixed $test (required)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function testPathParamCustomPostWithHttpInfo($pathParam, $test)
    {
        $request = $this->testPathParamCustomPostRequest($pathParam, $test);

        $this->log('info', 'Openapi send request.', [
            'requestBody' => (string)$request->getBody(),
            'requestUri' => (string)$request->getUri()
        ]);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);

                $this->log('info', 'Openapi response successfully received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);
            } catch (ConnectException $e) {
                if (str_contains($e->getMessage(), 'Operation timed out')) {
                    throw new RequestTimedOut(message: $e->getMessage());
                }
                throw $e;
            } catch (RequestException $e) {
                if (!$e->hasResponse()) {
                    throw $e;
                }
                $response = $e->getResponse();

                $this->log('info', 'Openapi not 2xx response received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);

                switch ($response->getStatusCode()) {
                    case 504:
                    case 524:
                        throw new RequestTimedOut(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                    case 503:
                        throw new ServiceUnavailable(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                }
            }

            $statusCode = $response->getStatusCode();

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    return [
                        $this->deserialize((string) $responseBody),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            return [
                $this->deserialize((string) $responseBody),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->deserialize((string) $e->getResponseBody());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testPathParamCustomPostAsync
     *
     * 
     *
     * @param mixed $pathParam (required)
     * @param mixed $test (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testPathParamCustomPostAsync($pathParam, $test)
    {
        return $this->testPathParamCustomPostAsyncWithHttpInfo($pathParam, $test)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testPathParamCustomPostAsyncWithHttpInfo
     *
     * 
     *
     * @param mixed $pathParam (required)
     * @param mixed $test (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testPathParamCustomPostAsyncWithHttpInfo($pathParam, $test)
    {
        $request = $this->testPathParamCustomPostRequest($pathParam, $test);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [
                        $this->deserialize((string) $response->getBody()),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testPathParamCustomPost'
     *
     * @param mixed $pathParam (required)
     * @param mixed $test (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testPathParamCustomPostRequest($pathParam, $test)
    {
        // verify the required parameter 'pathParam' is set
        if ($pathParam === null || (is_array($pathParam) && count($pathParam) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pathParam when calling testPathParamCustomPost'
            );
        }
        // verify the required parameter 'test' is set
        if ($test === null || (is_array($test) && count($test) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $test when calling testPathParamCustomPost'
            );
        }

        $resourcePath = '/test/{pathParam}/custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pathParam !== null) {
            $resourcePath = str_replace(
                '{' . 'pathParam' . '}',
                ObjectSerializer::toPathValue($pathParam),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($test)) {
            $_tempBody = $test;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($_tempBody);
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testPost
     *
     * @param mixed $test test (required)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function testPost($test)
    {
        list($response) = $this->testPostWithHttpInfo($test);
        return $response;
    }

    /**
     * Operation testPostWithHttpInfo
     *
     * @param mixed $test (required)
     *
     * @throws ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array
     */
    public function testPostWithHttpInfo($test)
    {
        $request = $this->testPostRequest($test);

        $this->log('info', 'Openapi send request.', [
            'requestBody' => (string)$request->getBody(),
            'requestUri' => (string)$request->getUri()
        ]);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);

                $this->log('info', 'Openapi response successfully received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);
            } catch (ConnectException $e) {
                if (str_contains($e->getMessage(), 'Operation timed out')) {
                    throw new RequestTimedOut(message: $e->getMessage());
                }
                throw $e;
            } catch (RequestException $e) {
                if (!$e->hasResponse()) {
                    throw $e;
                }
                $response = $e->getResponse();

                $this->log('info', 'Openapi not 2xx response received.', [
                    'class' => self::class,
                    'responseBody' => (string)$response->getBody(),
                    'responseStatusCode' => $response->getStatusCode()
                ]);

                switch ($response->getStatusCode()) {
                    case 504:
                    case 524:
                        throw new RequestTimedOut(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                    case 503:
                        throw new ServiceUnavailable(
                            message: $e->getMessage(),
                            code: 0,
                            responseHeaders: $response->getHeaders(),
                            responseBody: (string)$response->getBody(),
                        );
                }
            }

            $statusCode = $response->getStatusCode();

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    return [
                        $this->deserialize((string) $responseBody),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            return [
                $this->deserialize((string) $responseBody),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->deserialize((string) $e->getResponseBody());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testPostAsync
     *
     * 
     *
     * @param mixed $test (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testPostAsync($test)
    {
        return $this->testPostAsyncWithHttpInfo($test)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testPostAsyncWithHttpInfo
     *
     * 
     *
     * @param mixed $test (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testPostAsyncWithHttpInfo($test)
    {
        $request = $this->testPostRequest($test);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [
                        $this->deserialize((string) $response->getBody()),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testPost'
     *
     * @param mixed $test (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testPostRequest($test)
    {
        // verify the required parameter 'test' is set
        if ($test === null || (is_array($test) && count($test) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $test when calling testPost'
            );
        }

        $resourcePath = '/Test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($test)) {
            $_tempBody = $test;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($_tempBody);
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Returns host by hostIndex
     *
     * @return string
     */
    protected function getHost(): string
    {
        return $this->config->getHostFromSettings($this->hostIndex);
    }

    /**
     * Decodes response body
     *
     * @throws InvalidResponse when cannot decode body
     */
    protected function deserialize(string $responseBody): array
    {
        try {
            return ObjectSerializer::deserialize($responseBody);
        } catch (InvalidArgumentException $exception) {
            throw new InvalidResponse(
                message: $exception->getMessage(),
                code: 0,
                responseHeaders: null,
                responseBody: $responseBody,
            );
        }
    }

    protected function log(string $level, string $message, array $context): void
    {
        if ($this->logger) {
            $this->logger->log($level, $message, $context);
        }
    }
}
