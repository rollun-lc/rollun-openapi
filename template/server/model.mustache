<?php
declare(strict_types=1);
{{#models}}{{#model}}
namespace {{package}};

use Articus\DataTransfer\Annotation as DTA;
use OpenAPI\DataTransfer\Annotation as ODTA;
use ReflectionProperty;
use Traversable;

/**
{{#description}}
 * {{description}}
{{/description}}
 {{#vars}}
 * @property {{>php_data_type}}{{#nullable}}|null{{/nullable}} ${{name}}
 {{/vars}}
 */
class {{classname}} implements \IteratorAggregate, \JsonSerializable
{
{{#vars}}
    /**
{{#description}}
     * {{description}}
{{/description}}
     * @ODTA\Data(field="{{baseName}}"{{#isNullable}}, nullable=true{{/isNullable}}{{^required}}, required=false{{/required}}){{#vendorExtensions}}{{#internal.ze-ph.fromQuery}}
{{>model_query_var}}{{/internal.ze-ph.fromQuery}}{{/vendorExtensions}}{{#vendorExtensions}}{{^internal.ze-ph.fromQuery}}
{{>model_normal_var}}{{/internal.ze-ph.fromQuery}}{{/vendorExtensions}}{{^vendorExtensions}}
{{>model_normal_var}}{{/vendorExtensions}}     * @var {{^isContainer}}{{dataType}}{{/isContainer}}{{#isContainer}}{{items.dataType}}[]{{/isContainer}}
     */
    private {{>php_data_type}} ${{name}};
{{/vars}}

    public function &__get($name)
    {
        if ($this->isInitialized($name)) {
            return $this->{$name};
        }
        $null = null;
        return $null;
    }

    public function __set(string $name, $value): void
    {
        $this->{$name} = $value;
    }

    public function __isset(string $name): bool
    {
        return $this->isInitialized($name) && isset($this->{$name});
    }

    public function __unset(string $name): void
    {
        unset($this->{$name});
    }

    public function getIterator(): Traversable
    {
        return new \ArrayIterator($this->toArray());
    }

    public function jsonSerialize(): array
    {
        return $this->toArray();
    }

    public function toArray(): array
    {
        $result = [];
        foreach (self::getAllPropertyNames() as $propertyName) {
            if ($this->isInitialized($propertyName)) {
                $result[$propertyName] = $this->{$propertyName};
            }
        }
        return $result;
    }

    private static function getAllPropertyNames(): array
    {
        return [{{#vars}}'{{name}}'{{^-last}}, {{/-last}}{{/vars}}];
    }
{{#vars}}

    public function get{{nameInPascalCase}}(): {{#nullable}}?{{/nullable}}{{>php_data_type}}
    {
        return $this->{{name}};
    }

    public function set{{nameInPascalCase}}({{>php_data_type}} ${{name}}): self
    {
        $this->{{name}} = ${{name}};
        return $this;
    }

    public function has{{nameInPascalCase}}(): bool
    {
        return $this->isInitialized('{{name}}');
    }
{{/vars}}

    private function isInitialized(string $property): bool
    {
        $rp = new ReflectionProperty(self::class, $property);
        $rp->setAccessible(true);
        return $rp->isInitialized($this);
    }
}{{/model}}{{/models}}
